name: deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      ref:
        description: "Git ref (branch/tag/SHA) to deploy"
        required: false
        default: ""

permissions:
  contents: read

jobs:
  backend:
    outputs:
      backend_host: ${{ steps.backend_url.outputs.host }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref != '' && inputs.ref || github.ref }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Locate Terraform remote state
        id: tfstate
        run: |
          set -euo pipefail
          PROJ="${{ secrets.PROJECT_NAME }}"
          STATE_RG="${PROJ}-tfstate-rg"
          SA=$(az storage account list -g "$STATE_RG" --query "[0].name" -o tsv)
          echo "state_rg=$STATE_RG" >> $GITHUB_OUTPUT
          echo "state_sa=$SA" >> $GITHUB_OUTPUT
          echo "state_container=tfstate" >> $GITHUB_OUTPUT
          echo "state_key=${PROJ}.tfstate" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init (read outputs)
        working-directory: infra/terraform
        env:
          ARM_USE_OIDC: true
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ steps.tfstate.outputs.state_rg }}" \
            -backend-config="storage_account_name=${{ steps.tfstate.outputs.state_sa }}" \
            -backend-config="container_name=${{ steps.tfstate.outputs.state_container }}" \
            -backend-config="key=${{ steps.tfstate.outputs.state_key }}"

      - name: Read Terraform outputs
        id: tfout
        working-directory: infra/terraform
        run: |
          OUT=$(terraform output -json)
          echo "$OUT" | jq -r '.acr_login_server.value' | sed 's/\r$//' > /tmp/acr_server
          echo "$OUT" | jq -r '.acr_name.value' | sed 's/\r$//' > /tmp/acr_name
          echo "$OUT" | jq -r '.resource_group.value' | sed 's/\r$//' > /tmp/rg
          echo "$OUT" | jq -r '.backend_webapp_name.value' | sed 's/\r$//' > /tmp/backend
          echo "$OUT" | jq -r '.worker_webapp_name.value' | sed 's/\r$//' > /tmp/worker
          echo "$OUT" | jq -r '.static_site_name.value' | sed 's/\r$//' > /tmp/swa_name
          echo "acr_server=$(cat /tmp/acr_server)" >> $GITHUB_OUTPUT
          echo "acr_name=$(cat /tmp/acr_name)" >> $GITHUB_OUTPUT
          echo "resource_group=$(cat /tmp/rg)" >> $GITHUB_OUTPUT
          echo "backend_name=$(cat /tmp/backend)" >> $GITHUB_OUTPUT
          echo "worker_name=$(cat /tmp/worker)" >> $GITHUB_OUTPUT
          echo "swa_name=$(cat /tmp/swa_name)" >> $GITHUB_OUTPUT

      - name: ACR Login
        run: az acr login -n ${{ steps.tfout.outputs.acr_name }}

      - name: Docker Build and Push (backend)
        env:
          ACR: ${{ steps.tfout.outputs.acr_server }}
        run: |
          docker build -f project_vrs/app/Dockerfile.backend -t $ACR/vrs-backend:${{ github.sha }} project_vrs/app
          docker push $ACR/vrs-backend:${{ github.sha }}

      - name: Point backend Web App to new image
        env:
          ACR: ${{ steps.tfout.outputs.acr_server }}
        run: |
          az webapp config container set \
            -g ${{ steps.tfout.outputs.resource_group }} \
            -n ${{ steps.tfout.outputs.backend_name }} \
            --docker-custom-image-name $ACR/vrs-backend:${{ github.sha }} \
            --docker-registry-server-url https://$ACR
          # Ensure registry creds are present (from ACR admin)
          CREDS=$(az acr credential show -n ${{ steps.tfout.outputs.acr_name }})
          USER=$(echo "$CREDS" | jq -r '.username')
          PASS=$(echo "$CREDS" | jq -r '.passwords[0].value')
          az webapp config appsettings set -g ${{ steps.tfout.outputs.resource_group }} -n ${{ steps.tfout.outputs.backend_name }} --settings \
            DOCKER_REGISTRY_SERVER_URL=https://${{ steps.tfout.outputs.acr_server }} \
            DOCKER_REGISTRY_SERVER_USERNAME=$USER \
            DOCKER_REGISTRY_SERVER_PASSWORD=$PASS
          az webapp restart -g ${{ steps.tfout.outputs.resource_group }} -n ${{ steps.tfout.outputs.backend_name }}

      - name: Point worker Web App to new image
        if: always()
        env:
          ACR: ${{ steps.tfout.outputs.acr_server }}
        run: |
          az webapp config container set \
            -g ${{ steps.tfout.outputs.resource_group }} \
            -n ${{ steps.tfout.outputs.worker_name }} \
            --docker-custom-image-name $ACR/vrs-backend:${{ github.sha }} \
            --docker-registry-server-url https://$ACR
          CREDS=$(az acr credential show -n ${{ steps.tfout.outputs.acr_name }})
          USER=$(echo "$CREDS" | jq -r '.username')
          PASS=$(echo "$CREDS" | jq -r '.passwords[0].value')
          az webapp config appsettings set -g ${{ steps.tfout.outputs.resource_group }} -n ${{ steps.tfout.outputs.worker_name }} --settings \
            DOCKER_REGISTRY_SERVER_URL=https://${{ steps.tfout.outputs.acr_server }} \
            DOCKER_REGISTRY_SERVER_USERNAME=$USER \
            DOCKER_REGISTRY_SERVER_PASSWORD=$PASS
          az webapp restart -g ${{ steps.tfout.outputs.resource_group }} -n ${{ steps.tfout.outputs.worker_name }}

      - name: Compute Backend URL
        id: backend_url
        run: |
          HOST=$(az webapp show -g ${{ steps.tfout.outputs.resource_group }} -n ${{ steps.tfout.outputs.backend_name }} --query defaultHostName -o tsv)
          echo "host=$HOST" >> $GITHUB_OUTPUT

  frontend:
    runs-on: ubuntu-latest
    needs: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref != '' && inputs.ref || github.ref }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Locate Terraform remote state
        id: tfstate
        run: |
          set -euo pipefail
          PROJ="${{ secrets.PROJECT_NAME }}"
          STATE_RG="${PROJ}-tfstate-rg"
          SA=$(az storage account list -g "$STATE_RG" --query "[0].name" -o tsv)
          echo "state_rg=$STATE_RG" >> $GITHUB_OUTPUT
          echo "state_sa=$SA" >> $GITHUB_OUTPUT
          echo "state_container=tfstate" >> $GITHUB_OUTPUT
          echo "state_key=${PROJ}.tfstate" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init (read outputs)
        working-directory: infra/terraform
        env:
          ARM_USE_OIDC: true
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ steps.tfstate.outputs.state_rg }}" \
            -backend-config="storage_account_name=${{ steps.tfstate.outputs.state_sa }}" \
            -backend-config="container_name=${{ steps.tfstate.outputs.state_container }}" \
            -backend-config="key=${{ steps.tfstate.outputs.state_key }}"

      - name: Read Terraform outputs
        id: tfout
        working-directory: infra/terraform
        run: |
          OUT=$(terraform output -json)
          echo "$OUT" | jq -r '.resource_group.value' | sed 's/\r$//' > /tmp/rg
          echo "$OUT" | jq -r '.static_site_name.value' | sed 's/\r$//' > /tmp/swa_name
          echo "resource_group=$(cat /tmp/rg)" >> $GITHUB_OUTPUT
          echo "swa_name=$(cat /tmp/swa_name)" >> $GITHUB_OUTPUT

      - name: Inject backend host into env.js
        run: |
          HOST="${{ needs.backend.outputs.backend_host }}"
          sed -i "s#API_BASE: 'http://localhost:8000/api'#API_BASE: 'https://$HOST/api'#" project_vrs/app/frontend/public/env.js
          sed -i "s#API_HOST: 'localhost:8000'#API_HOST: '$HOST'#" project_vrs/app/frontend/public/env.js

      - name: Ensure Static Web Apps CLI extension
        run: |
          az extension add -n staticwebapp --only-show-errors || az extension update -n staticwebapp --only-show-errors

      - name: Fetch SWA deployment token
        id: swa
        run: |
          set -euo pipefail
          RG="${{ steps.tfout.outputs.resource_group }}"
          SWA="${{ steps.tfout.outputs.swa_name }}"
          if [ -z "$RG" ] || [ "$RG" = "null" ]; then
            PROJ="${{ secrets.PROJECT_NAME }}"
            SAN=$(echo "$PROJ" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9')
            RG="${SAN}-rg"
          fi
          if [ -z "$SWA" ] || [ "$SWA" = "null" ]; then
            SWA=$(az staticwebapp list -g "$RG" --query "[0].name" -o tsv || true)
          fi
          if [ -z "$SWA" ] || [ -z "$RG" ]; then
            echo "Could not determine Static Web App name or resource group." >&2
            exit 1
          fi
          TOKEN=$(az staticwebapp secrets list -g "$RG" -n "$SWA" --query properties.apiKey -o tsv)
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Deploy Static Web App
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ steps.swa.outputs.token }}
          action: "upload"
          app_location: "project_vrs/app/frontend"
          output_location: "dist/frontend"
          skip_api_build: true
